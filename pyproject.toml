[tool]
[tool.poetry]
name = "clean_python"
version = "1.3.5"
description = "A Template to create a clean python project with modern tools"
license = "BSD-3-Clause"
authors = ["Flávio Codeço Coelho <fccoelho@gmail.com>"]
readme = "README.md"
repository = "https://github.com/fccoelho/python-project"
documentation = "https://fccoelho.github.io/python-project/"
keywords = ['cookiecutter', 'template', 'package']

include = ['{{cookiecutter.project_slug}}/**/*', 'cookiecutter.json', 'hooks/*']

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
cookiecutter = "1.7.2"

pytest = { version = "^6.2.5", optional = true }
pyyaml = { version = "^6.0", optional = true }
mkdocs = { version = "^1.1.2", optional = true }
mkdocs-material = { version = "^6.1.7", optional = true }
mkdocs-material-extensions = { version = "^1.0.1", optional = true }
pytest-cov = { version = "^2.10.1", optional = true }
tox = { version = "^3.20.1", optional = true }
mkdocs-include-markdown-plugin = { version = "^2.8.0", optional = true }
fire = { version = "^0.4.0", optional = true }
pre-commit = { version = "^2.18.1", optional = true }
mike = { version = "^1.1.2", optional = true }
livereload = { version = "^2.6.3", optional = true }
pytest-cookies = { version = "^0.6.1", optional = true }
colorama = "^0.4.5"
mypy = { version = "^1.5.1", optional = true }
ruff = "^0.5.0"

[tool.poetry.extras]
dev = [
    "pytest",
    "pytest-cookies",
    "pyyaml",
    "mkdocs",
    "mkdocs-material",
    "mkdocs-material-extensions",
    "pytest-cov",
    "tox",
    "mkdocs-include-markdown-plugin",
    "fire",
    "mike",
    "livereload",
    "mypy",
]

[[tool.poetry.source]]
name = "ali"
url = "https://mirrors.aliyun.com/pypi/simple"
priority = 'primary'

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
